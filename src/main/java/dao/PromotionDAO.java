package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import context.DBConnection;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import models.Order;
import models.Promotion;

public class PromotionDAO {

    private Connection connection;

    public PromotionDAO() {
        this.connection = DBConnection.getConnection();
    }

    public boolean createPromotion(Promotion promotion) {
        String sql = "INSERT INTO promotions (event_id, promotion_name, promotion_code, "
                + "start_time, end_time, is_active) VALUES (?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, promotion.getEventID());
            pstmt.setString(2, promotion.getPromotionName());
            pstmt.setString(3, promotion.getPromotionCode());
            pstmt.setTimestamp(4, promotion.getStartTime());
            pstmt.setTimestamp(5, promotion.getEndTime());
            pstmt.setBoolean(6, promotion.isActive());

            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public List<Promotion> getPromotionsByEventId(int eventId) {
        List<Promotion> promotions = new ArrayList<>();
        String sql = "SELECT * FROM promotions WHERE event_id = ?";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, eventId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Promotion promotion = new Promotion();
                promotion.setPromotionID(rs.getInt("promotion_id"));
                promotion.setEventID(rs.getInt("event_id"));
                promotion.setPromotionName(rs.getString("promotion_name"));
                promotion.setPromotionCode(rs.getString("promotion_code"));
                promotion.setStartTime(rs.getTimestamp("start_time"));
                promotion.setEndTime(rs.getTimestamp("end_time"));
                promotion.setActive(rs.getBoolean("is_active"));
                promotions.add(promotion);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return promotions;
    }

    public Promotion getPromotionByCode(String code) {
        if (code == null || code.trim().isEmpty()) {
            System.out.println("‚ùå [getPromotionByCode] M√£ truy·ªÅn v√†o r·ªóng.");
            return null;
        }

        String cleanedCode = code.trim().toUpperCase();
        System.out.println("üîç [getPromotionByCode] M√£ ƒë√£ nh·∫≠p: [" + cleanedCode + "]");

        String sql = "SELECT * FROM Promotions WHERE UPPER(RTRIM(LTRIM(PromotionCode))) = ? AND IsActive = 1";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, cleanedCode);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                System.out.println("‚úÖ [getPromotionByCode] T√¨m th·∫•y m√£: " + rs.getString("PromotionCode"));
                Promotion promotion = new Promotion();
                promotion.setPromotionID(rs.getInt("PromotionID"));
                promotion.setEventID(rs.getInt("EventID"));
                promotion.setPromotionName(rs.getString("PromotionName"));
                promotion.setPromotionCode(rs.getString("PromotionCode"));
                promotion.setPromotionType(rs.getString("PromotionType"));
                promotion.setStartTime(rs.getTimestamp("StartTime"));
                promotion.setEndTime(rs.getTimestamp("EndTime"));
                promotion.setDiscountPercentage(rs.getBigDecimal("DiscountPercentage"));
                promotion.setDiscountAmount(rs.getBigDecimal("DiscountAmount"));
                promotion.setMinOrderAmount(rs.getBigDecimal("MinOrderAmount"));
                promotion.setMaxDiscountAmount(rs.getBigDecimal("MaxDiscountAmount"));
                promotion.setMaxUsageCount(rs.getInt("MaxUsageCount"));
                promotion.setCurrentUsageCount(rs.getInt("CurrentUsageCount"));
                promotion.setActive(rs.getBoolean("IsActive"));
                return promotion;
            } else {
                System.out.println("‚ùå [getPromotionByCode] KH√îNG t√¨m th·∫•y m√£ trong DB: [" + cleanedCode + "]");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public BigDecimal calculateDiscount(String code, Order order) {
        System.out.println("\n================ DEBUG √ÅP D·ª§NG M√É GI·∫¢M GI√Å ================");

        // 1Ô∏è‚É£: Truy xu·∫•t m√£ t·ª´ DB
        Promotion promotion = getPromotionByCode(code);
        if (promotion == null) {
            System.out.println("‚ùå [B1] M√£ kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a.");
            return BigDecimal.ZERO;
        }
        System.out.println("‚úÖ [B1] M√£ t·ªìn t·∫°i: " + promotion.getPromotionCode());

        // 2Ô∏è‚É£: So kh·ªõp Event ID
        int promoEventId = promotion.getEventID();
        int orderEventId = order.getEvent().getEventID();
        System.out.println("‚û°Ô∏è [B2] promotion.EventID = " + promoEventId);
        System.out.println("‚û°Ô∏è [B2] order.EventID     = " + orderEventId);
        if (promoEventId != orderEventId) {
            System.out.println("‚ùå [B2] M√£ kh√¥ng √°p d·ª•ng cho s·ª± ki·ªán hi·ªán t·∫°i.");
            return BigDecimal.ZERO;
        }

        // 3Ô∏è‚É£: Ki·ªÉm tra th·ªùi gian hi·ªáu l·ª±c
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start = promotion.getStartTime().toLocalDateTime();
        LocalDateTime end = promotion.getEndTime().toLocalDateTime();
        System.out.println("üïì [B3] Hi·ªán t·∫°i: " + now);
        System.out.println("üóì [B3] Hi·ªáu l·ª±c: " + start + " ‚Üí " + end);
        if (now.isBefore(start) || now.isAfter(end)) {
            System.out.println("‚ùå [B3] M√£ ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu.");
            return BigDecimal.ZERO;
        }

        // 4Ô∏è‚É£: Ki·ªÉm tra ƒëi·ªÅu ki·ªán t·ªïng ti·ªÅn t·ªëi thi·ªÉu
        BigDecimal orderAmount = order.getTotalAmount();
        BigDecimal minAmount = promotion.getMinOrderAmount();
        System.out.println("üí∞ [B4] T·ªïng ti·ªÅn ƒë∆°n h√†ng: " + orderAmount);
        System.out.println("üîí [B4] Y√™u c·∫ßu t·ªëi thi·ªÉu: " + minAmount);
        if (minAmount != null && orderAmount.compareTo(minAmount) < 0) {
            System.out.println("‚ùå [B4] ƒê∆°n h√†ng kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán t·ªëi thi·ªÉu.");
            return BigDecimal.ZERO;
        }

        // 5Ô∏è‚É£: Ki·ªÉm tra l∆∞·ª£t s·ª≠ d·ª•ng t·ªëi ƒëa
        int current = promotion.getCurrentUsageCount();
        int max = promotion.getMaxUsageCount();
        System.out.println("üîÅ [B5] Usage: " + current + "/" + max);
        if (max > 0 && current >= max) {
            System.out.println("‚ùå [B5] M√£ ƒë√£ v∆∞·ª£t qu√° s·ªë l∆∞·ª£t s·ª≠ d·ª•ng.");
            return BigDecimal.ZERO;
        }

        // ‚úÖ T√≠nh gi·∫£m gi√°
        BigDecimal discount = BigDecimal.ZERO;
        switch (promotion.getPromotionType()) {
            case "percentage":
                System.out.println("üìê [T√çNH] Ki·ªÉu ph·∫ßn trƒÉm: " + promotion.getDiscountPercentage());
                if (promotion.getDiscountPercentage() != null) {
                    discount = orderAmount.multiply(promotion.getDiscountPercentage())
                            .divide(new BigDecimal(100));
                    if (promotion.getMaxDiscountAmount() != null
                            && discount.compareTo(promotion.getMaxDiscountAmount()) > 0) {
                        discount = promotion.getMaxDiscountAmount();
                        System.out.println("‚ö†Ô∏è [T√çNH] ƒê·∫°t gi·ªõi h·∫°n gi·∫£m t·ªëi ƒëa: " + discount);
                    }
                }
                break;

            case "fixed_amount":
                System.out.println("üíµ [T√çNH] Ki·ªÉu s·ªë ti·ªÅn c·ªë ƒë·ªãnh: " + promotion.getDiscountAmount());
                discount = promotion.getDiscountAmount() != null ? promotion.getDiscountAmount() : BigDecimal.ZERO;
                if (discount.compareTo(orderAmount) > 0) {
                    discount = orderAmount;
                }
                break;

            case "buy_x_get_y":
                System.out.println("‚ö†Ô∏è [T√çNH] Ch∆∞a h·ªó tr·ª£ lo·∫°i buy_x_get_y.");
                break;

            default:
                System.out.println("‚ùå [T√çNH] Lo·∫°i m√£ kh√¥ng x√°c ƒë·ªãnh: " + promotion.getPromotionType());
                break;
        }

        System.out.println("üéâ [K·∫æT QU·∫¢] M·ª©c gi·∫£m √°p d·ª•ng: " + discount);
        System.out.println("============================================================\n");
        return discount;
    }

}
