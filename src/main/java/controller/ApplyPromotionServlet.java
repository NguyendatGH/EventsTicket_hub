package controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import dao.PromotionDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import models.Order;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

@WebServlet(name = "ApplyPromotionServlet", urlPatterns = {"/ApplyPromotionServlet"})
public class ApplyPromotionServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Set response headers
        response.setContentType("application/json;charset=UTF-8");
        response.setCharacterEncoding("UTF-8");

        String rawCode = request.getParameter("promoCode");
        String promoCode = (rawCode != null) ? rawCode.trim().toUpperCase() : "";

        HttpSession session = request.getSession();
        Order order = (Order) session.getAttribute("currentOrder");

        System.out.println("\n========== [APPLY PROMOTION SERVLET] ==========");
        System.out.println("üé´ M√£ nh·∫≠p v√†o: [" + promoCode + "]");
        System.out.println("üìù Order trong session: " + (order != null ? "C√ì" : "KH√îNG"));

        if (order != null) {
            System.out.println("üìù Event ID: " + order.getEvent().getEventID());
            System.out.println("üìù T·ªïng ti·ªÅn hi·ªán t·∫°i: " + order.getTotalAmount());
            System.out.println("üìù M√£ ƒë√£ √°p d·ª•ng: " + order.getPromotionCode());
        }

        PrintWriter out = response.getWriter();
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> result = new HashMap<>();

        try {
            // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
            if (order == null) {
                result.put("valid", false);
                result.put("message", "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt phi√™n l√†m vi·ªác.");
                writeJsonResponse(out, mapper, result);
                return;
            }

            // Tr∆∞·ªùng h·ª£p ƒë√£ c√≥ m√£ khuy·∫øn m√£i ƒë∆∞·ª£c √°p d·ª•ng
            if (order.getPromotionCode() != null && !order.getPromotionCode().trim().isEmpty()) {
                String existingCode = order.getPromotionCode().trim().toUpperCase();

                System.out.println("‚ö†Ô∏è ƒê√£ c√≥ m√£ ƒë∆∞·ª£c √°p d·ª•ng: [" + existingCode + "]");

                // N·∫øu m√£ y√™u c·∫ßu gi·ªëng v·ªõi m√£ ƒë√£ √°p d·ª•ng
                if (existingCode.equals(promoCode)) {
                    System.out.println("‚úÖ Tr·∫£ v·ªÅ th√¥ng tin m√£ ƒë√£ √°p d·ª•ng");

                    BigDecimal discount = order.getDiscountAmount() != null
                            ? order.getDiscountAmount() : BigDecimal.ZERO;
                    BigDecimal currentTotal = order.getTotalAmount();
                    BigDecimal originalTotal = currentTotal.add(discount);

                    int percent = calculateDiscountPercentage(discount, originalTotal);

                    result.put("valid", true);
                    result.put("alreadyApplied", true);
                    result.put("promotionCode", existingCode);
                    result.put("discountAmount", discount);
                    result.put("discountFormatted", formatCurrency(discount));
                    result.put("newTotalFormatted", formatCurrency(currentTotal));
                    result.put("percent", percent);
                    result.put("message", "M√£ " + existingCode + " ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng");

                    writeJsonResponse(out, mapper, result);
                    return;
                } else {
                    // N·∫øu mu·ªën √°p d·ª•ng m√£ kh√°c
                    result.put("valid", false);
                    result.put("message", "ƒê√£ c√≥ m√£ khuy·∫øn m√£i [" + existingCode + "] ƒë∆∞·ª£c √°p d·ª•ng. "
                            + "Vui l√≤ng h·ªßy m√£ hi·ªán t·∫°i tr∆∞·ªõc khi √°p d·ª•ng m√£ m·ªõi.");
                    writeJsonResponse(out, mapper, result);
                    return;
                }
            }

            // √Åp d·ª•ng m√£ m·ªõi
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† √°p d·ª•ng m√£ m·ªõi...");

            PromotionDAO promotionDAO = new PromotionDAO();
            BigDecimal discount = promotionDAO.calculateDiscount(promoCode, order);

            if (discount != null && discount.compareTo(BigDecimal.ZERO) > 0) {
                BigDecimal originalTotal = order.getTotalAmount();
                BigDecimal newTotal = originalTotal.subtract(discount);

                // ƒê·∫£m b·∫£o t·ªïng ti·ªÅn kh√¥ng √¢m
                if (newTotal.compareTo(BigDecimal.ZERO) < 0) {
                    newTotal = BigDecimal.ZERO;
                    discount = originalTotal;
                }

                System.out.println("‚úÖ √Åp d·ª•ng th√†nh c√¥ng!");
                System.out.println("üí∞ Gi·∫£m gi√°: " + discount);
                System.out.println("üßÆ T·ªïng m·ªõi: " + newTotal);

                int percent = calculateDiscountPercentage(discount, originalTotal);

                // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
                order.setPromotionCode(promoCode);
                order.setDiscountAmount(discount);
                order.setTotalAmount(newTotal);
                session.setAttribute("currentOrder", order);

                // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
                result.put("valid", true);
                result.put("alreadyApplied", false);
                result.put("promotionCode", promoCode);
                result.put("discountAmount", discount);
                result.put("discountFormatted", formatCurrency(discount));
                result.put("newTotalFormatted", formatCurrency(newTotal));
                result.put("percent", percent);
                result.put("message", "√Åp d·ª•ng m√£ th√†nh c√¥ng!");

            } else {
                System.out.println("‚ùå Kh√¥ng th·ªÉ √°p d·ª•ng m√£");
                result.put("valid", false);
                result.put("message", "M√£ kh√¥ng h·ª£p l·ªá, ƒë√£ h·∫øt h·∫°n, kh√¥ng √°p d·ª•ng cho s·ª± ki·ªán n√†y ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán t·ªëi thi·ªÉu.");
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói x·ª≠ l√Ω m√£ khuy·∫øn m√£i: " + e.getMessage());
            e.printStackTrace();

            result.put("valid", false);
            result.put("message", "L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω m√£ gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i.");
        }

        writeJsonResponse(out, mapper, result);
        System.out.println("===============================================\n");
    }

    /**
     * Ghi response JSON v√† ƒë·∫£m b·∫£o format ƒë√∫ng
     */
    private void writeJsonResponse(PrintWriter out, ObjectMapper mapper, Map<String, Object> result) {
        try {
            String jsonResponse = mapper.writeValueAsString(result);
            System.out.println("üì§ JSON Response: " + jsonResponse);
            out.print(jsonResponse);
            out.flush();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ghi JSON response: " + e.getMessage());
            e.printStackTrace();

            // Fallback response
            out.print("{\"valid\":false,\"message\":\"L·ªói h·ªá th·ªëng\"}");
            out.flush();
        }
    }

    /**
     * T√≠nh ph·∫ßn trƒÉm gi·∫£m gi√°
     */
    private int calculateDiscountPercentage(BigDecimal discount, BigDecimal originalTotal) {
        if (discount == null || originalTotal == null || originalTotal.compareTo(BigDecimal.ZERO) <= 0) {
            return 0;
        }

        try {
            return discount.multiply(BigDecimal.valueOf(100))
                    .divide(originalTotal, 0, BigDecimal.ROUND_HALF_UP)
                    .intValue();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t√≠nh ph·∫ßn trƒÉm: " + e.getMessage());
            return 0;
        }
    }

    /**
     * Format ti·ªÅn t·ªá theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
     */
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) {
            return "0 ‚Ç´";
        }

        try {
            // S·ª≠ d·ª•ng Locale Vi·ªát Nam
            Locale localeVN = new Locale("vi", "VN");
            NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(localeVN);

            // T√πy ch·ªânh format ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng
            currencyFormatter.setMaximumFractionDigits(0);
            currencyFormatter.setMinimumFractionDigits(0);

            String formatted = currencyFormatter.format(amount);

            // Thay th·∫ø k√Ω hi·ªáu ti·ªÅn t·ªá n·∫øu c·∫ßn
            formatted = formatted.replace("‚Ç´", "‚Ç´").replace("VND", "‚Ç´");

            return formatted;
        } catch (Exception e) {
            System.err.println(" L·ªói format ti·ªÅn t·ªá: " + e.getMessage());
            return amount.toString() + " ‚Ç´";
        }
    }
}