package controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import dao.PromotionDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import models.Order;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

@WebServlet(name = "ApplyPromotionServlet", urlPatterns = {"/ApplyPromotionServlet"})
public class ApplyPromotionServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rawCode = request.getParameter("promoCode");
        String promoCode = (rawCode != null) ? rawCode.trim().toUpperCase() : "";

        HttpSession session = request.getSession();
        Order order = (Order) session.getAttribute("currentOrder");

        System.out.println("\n========== [APPLY PROMOTION SERVLET] ==========");
        System.out.println("üì• M√£ nh·∫≠p: " + promoCode);
        System.out.println("üßæ currentOrder.eventID = " + order.getEvent().getEventID());
        System.out.println("üßæ C√≥ ƒë∆°n h√†ng trong session kh√¥ng? " + (order != null));

        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> result = new HashMap<>();

        try {
            if (order == null) {
                result.put("valid", false);
                result.put("message", "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt phi√™n l√†m vi·ªác.");
                out.print(mapper.writeValueAsString(result));
                return;
            }

// ‚úÖ N·∫øu ƒë√£ c√≥ m√£ khuy·∫øn m√£i, t·ª´ ch·ªëi √°p d·ª•ng l·∫°i
            if (order.getPromotionCode() != null && !order.getPromotionCode().isEmpty()) {
                System.out.println("‚ö†Ô∏è M√£ ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng: " + order.getPromotionCode());

                result.put("valid", false);
                result.put("message", "‚ö†Ô∏è M√£ khuy·∫øn m√£i ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng cho ƒë∆°n h√†ng n√†y.");
                out.print(mapper.writeValueAsString(result));
                return;
            }

            System.out.println("‚úÖ B·∫Øt ƒë·∫ßu √°p d·ª•ng m√£ cho ƒë∆°n h√†ng c√≥ t·ªïng: " + order.getTotalAmount());

            PromotionDAO promotionDAO = new PromotionDAO();
            BigDecimal discount = promotionDAO.calculateDiscount(promoCode, order);

            if (discount != null && discount.compareTo(BigDecimal.ZERO) > 0) {
                BigDecimal newTotal = order.getTotalAmount().subtract(discount);
                System.out.println("‚úÖ Gi·∫£m gi√° h·ª£p l·ªá: " + discount);
                System.out.println("üßÆ T·ªïng m·ªõi sau gi·∫£m: " + newTotal);

                result.put("valid", true);
                result.put("discountAmount", discount);
                result.put("discountFormatted", formatCurrency(discount));
                result.put("newTotalFormatted", formatCurrency(newTotal));

                order.setPromotionCode(promoCode);
                order.setDiscountAmount(discount);
                order.setTotalAmount(newTotal);
                session.setAttribute("currentOrder", order);
            } else {
                System.out.println("‚ùå Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán √°p d·ª•ng m√£.");
                result.put("valid", false);
                result.put("message", "‚ö†Ô∏è M√£ kh√¥ng h·ª£p l·ªá, ƒë√£ h·∫øt h·∫°n, kh√¥ng ƒë√∫ng s·ª± ki·ªán ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán √°p d·ª•ng.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            result.put("valid", false);
            result.put("message", "L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω m√£ gi·∫£m gi√°.");
        }

        out.print(mapper.writeValueAsString(result));
        out.flush();
        System.out.println("===============================================\n");
    }

    private String formatCurrency(BigDecimal amount) {
        Locale localeVN = new Locale("vi", "VN");
        NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(localeVN);
        return currencyFormatter.format(amount);
    }
}
